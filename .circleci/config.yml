version: 2.1

commands:
  install-awscli:
    description: Install aws cli 
    steps:
      - run: 
          name : install aws cli
          command : |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install-ansible:
    description: Install ansible 
    steps:
      - run: 
          name : install ansible
          command : |
            sudo apt-add-repository ppa:ansible/ansible
            sudo apt update
            sudo apt install ansible
  install-nodejs:
    description: install nodejs
    steps:
      - run: 
          name : install nodejs
          command : |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash - &&\
            sudo apt-get install -y nodejs 
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
  revert-migrations:
    description: Revert the last migration, if any were executed during the current workflow
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: npm-install
          command: |
            cd frontend 
            npm install
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps] 
      - run:
          name: npm-install
          command: |
            cd backend 
            npm install
            npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
          
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: npm unit test
          command: |
            cd frontend  
            npm install 
            npm test
      
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-deps]  
      - run:
          name:  back-end test
          command: | 
            cd backend  
            npm install 
            npm test 
        
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: npm-install
          command: |
            cd frontend 
            npm install 
            npm audit fix --audit-level=critical --force           
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout  
      - restore_cache:
          keys: [backend-deps] 
      - run:
          name: npm audit
          command: |
            cd backend 
            npm install
            npm audit fix --audit-level=critical --force  
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Fetch and save the back-end ec2 public ip 
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      - install-ansible
      - add_ssh_keys:
              fingerprints: ["55:3c:df:5c:1e:6e:a4:70:40:c7:72:31:c0:68:d3:d7"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible 
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-awscli
      - run:
          name:  npm install && cd migrations 
          command: |
            cd backend 
            npm install
            npm run migrations > migrations_dump.txt  
            cat migrations_dump.txt            
      - run:
          name: Send migration results to memstash
          command: | 
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment
      - revert-migrations 
  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout   
      - install-awscli
      - install-nodejs
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: cd frontend & npm run build
          command: | 
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"  
            cat frontend/.env
      - run:
          name: tar -czvf artifact
          command: | 
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      - install-ansible
      - install-nodejs
      - add_ssh_keys:
              fingerprints: ["55:3c:df:5c:1e:6e:a4:70:40:c7:72:31:c0:68:d3:d7"] 
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: cd backend && npm install
          command: | 
            cd backend
            npm install 
      - run:
          name: package back-end
          command: | 
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files

      - run:
          name: deploy back-end
          command: | 
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli 
      - install-nodejs
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi  
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli 
      - install-nodejs
      - run:
          name: save old workflow id to kvdb.io
          command: |
            wxport OLD_WORKFLOW_ID=$(aws cloudformation \
                    list-exports --query "Exports[?Name=\'WorkflowID\'].Value" \
                    --no-paginate --output text)
            echo "Old Workflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack
      - destroy-environment
      - revert-migrations
  cleanup:
      docker:
        - image: cimg/base:stable
      steps:
        - checkout
        - install-awscli 
        - install-nodejs 
        - run:
            name: Remove old stacks and files
            command: |
              export STACKS=($(aws cloudformation list-stacks \
                  --query "StackSummaries[*].StackName" \
                  --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              echo Stack names:"${STACKS[@]}"


              export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id) 
              echo Old Workflow ID: $OldWorkflowID
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend] 
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]    
      - run-migrations:
         requires: [configure-infrastructure] 
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]