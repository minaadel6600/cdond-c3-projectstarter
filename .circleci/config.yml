version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: cd-frontend
          command: cd frontend
      - run:
          name: npm-install
          command: cd frontend && npm install
      - run:
          name: npm-build
          command: cd frontend && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: cd-backend
          command: cd backend
      - run:
          name: npm-install
          command: cd backend && npm install
      - run:
          name: npm-build
          command: cd backend && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: cd-frontend
          command: cd frontend
      - run:
          name: npm-install
          command: cd frontend && npm install 
      - run:
          name: npm-test
          command: cd frontend && npm run test
      
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: cd-backend
          command: cd backend
      - run:
          name:  npm-install
          command: cd backend && npm install 
      - run:
          name: npm-test
          command: cd backend && npm run test
        
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: cd-frontend
          command: cd frontend
      - run:
          name: npm-install
          command: cd frontend && npm install 
      - run:
          name: npm audit
          command: cd frontend && npm audit fix --audit-level=critical --force           
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: cd-backend
          command: cd backend
      - run:
          name: npm-install
          command: cd backend && npm install
      - run:
          name: npm audit
          command: cd backend && npm audit fix --audit-level=critical --force  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text > .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths: 
            - inventory.txt 
     # - destroy_environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: ["55:3c:df:5c:1e:6e:a4:70:40:c7:72:31:c0:68:d3:d7"] 
      - run:
          name: Install Ansible
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible && ansible-playbook -i inventory.txt configure-server.yml
workflows:
  default:
    jobs:
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
