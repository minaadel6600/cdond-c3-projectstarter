version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: cd-frontend
          command: cd frontend
      - run:
          name: npm-install
          command: cd frontend && npm install
      - run:
          name: npm-build
          command: cd frontend && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: cd-backend
          command: cd backend
      - run:
          name: npm-install
          command: cd backend && npm install
      - run:
          name: npm-build
          command: cd backend && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: cd-frontend
          command: cd frontend
      - run:
          name: npm-install
          command: cd frontend && npm cache clean --force && npm install --force
      - run:
          name: npm-test
          command: cd frontend && npm run test
      
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: cd-backend
          command: cd backend
      - run:
          name:  npm-install
          command: cd backend&& npm cache clean --force && npm install --force
      - run:
          name: npm-test
          command: cd backend && npm run test
        
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: cd-frontend
          command: cd frontend
      - run:
          name: npm-install
          command: cd frontend && npm install 
      - run:
          name: npm audit
          command: cd frontend && npm audit fix --audit-level=critical --force           
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: cd-backend
          command: cd backend
      - run:
          name: npm-install
          command: cd backend && npm install
      - run:
          name: npm audit
          command: cd backend && npm audit fix --audit-level=critical --force  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Fetch and save the back-end ec2 public ip 
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text > .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths: 
            - inventory.txt 
     # - destroy_environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: ["55:3c:df:5c:1e:6e:a4:70:40:c7:72:31:c0:68:d3:d7"] 
      - run:
          name: Install Ansible
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible && ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: cd backend && npm install
          command: |
            cd backend && npm install
      # - run:
      #     name: Run migrations
      #     command: |
      #       cd backend && npm run migrations > migrations_dump.txt            
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # If you are using kvdb.io, generate the bucket ID "FA58Y7TB9euJQRoJ9PxQr4" in your local terminal first
              curl https://kvdb.io/FA58Y7TB9euJQRoJ9PxQr4/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure 
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout 
      - run:
          name: apt-get install 
          command: | 
            sudo apt-get install 
      - run:
          name: Install ansible
          command: | 
            apk add --update ansible 
      - run:
          name: Install curl
          command: | 
            apt-get update; apt-get install curl
      - run:
          name: Install awscli
          command: | 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:backend-${CIRCLE_WORKFLOW_ID:0:7}")
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cat frontend/.env
      - run:
          name: cd frontend & npm install
          command: | 
            cd frontend & npm install 
      - run:
          name: cd frontend & npm run build
          command: | 
            cd frontend & npm run build
      - run:
          name: yum install -y tar gzip
          command: | 
            yum install -y tar gzip
      - run:
          name: tar -czvf artifact
          command: | 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      - run:
          name: tar -czvf artifact
          command: | 
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: ["55:3c:df:5c:1e:6e:a4:70:40:c7:72:31:c0:68:d3:d7"] 
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: yum install -y tar gzip
          command: | 
            yum install -y tar gzip
      - run:
          name: Install ansible
          command: | 
            apk add --update ansible 
      - run:
          name: Install ansible
          command: | 
            sudo apt update && sudo apt -y install nodejs
      - run:
          name: Deploy backend
          command: |
            # your code here
      - run:
          name: cd backend && npm install
          command: | 
            cd backend && npm install 
      - run:
          name: cd backend && npm run build
          command: | 
            cd backend && npm run build
      - run:
          name: Zip the directory
          command: | 
            cd .. && tar -C backend -czvf artifact.tar.gz .
      - run:
          name: cd .circleci/ansible && cat inventory.txt
          command: | 
            cd .circleci/ansible && cat inventory.txt
      - run:
          name: cd .circleci/ansible && cat inventory.txt
          command: | 
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install curl
          command: |
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 1
              else
                return 1
              fi  
workflows:
  default:
    jobs:
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
